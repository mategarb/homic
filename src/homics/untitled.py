#####################################################################################################
#####################################################################################################
#####################################################################################################
################################# Set params

###### ins ########


###### outs ########

# To save output figures
output_fig = 'figs'




#print(df_merge.head(1))
#####################################################################################################
#####################################################################################################
#####################################################################################################
################################# Stack into one-hot tensor
starte = time.time()



print("Stacked into tensor")    
    
#####################################################################################################
#####################################################################################################
#####################################################################################################
################################# One-hot encoding of the taxa
# Naming of output files

model.classifier.summary()

print("Encoded") 

ende = time.time()
print("One-hot tensor + encoder time: ") 
print(ende - starte)

#####################################################################################################
#####################################################################################################
#####################################################################################################
################################# Train model

output_file = 'model_'+naming+'.h5'
output_model = os.path.join(output_path, output_file)

start = time.time()
model.train()
end = time.time()

# Plot evaluation metrics
evaluation(model)

print("Model training finished with time: ") 
print(end - start)
